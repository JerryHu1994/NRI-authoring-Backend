// Auto-generated. Do not edit!

// (in-package wpi_jaco_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let AngularCommand = require('./AngularCommand.js');

//-----------------------------------------------------------

class HomeArmGoal {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.retract = null;
      this.retractPosition = null;
      this.numAttempts = null;
    }
    else {
      if (initObj.hasOwnProperty('retract')) {
        this.retract = initObj.retract
      }
      else {
        this.retract = false;
      }
      if (initObj.hasOwnProperty('retractPosition')) {
        this.retractPosition = initObj.retractPosition
      }
      else {
        this.retractPosition = new AngularCommand();
      }
      if (initObj.hasOwnProperty('numAttempts')) {
        this.numAttempts = initObj.numAttempts
      }
      else {
        this.numAttempts = 0;
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type HomeArmGoal
    // Serialize message field [retract]
    bufferOffset = _serializer.bool(obj.retract, buffer, bufferOffset);
    // Serialize message field [retractPosition]
    bufferOffset = AngularCommand.serialize(obj.retractPosition, buffer, bufferOffset);
    // Serialize message field [numAttempts]
    bufferOffset = _serializer.int16(obj.numAttempts, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type HomeArmGoal
    let len;
    let data = new HomeArmGoal(null);
    // Deserialize message field [retract]
    data.retract = _deserializer.bool(buffer, bufferOffset);
    // Deserialize message field [retractPosition]
    data.retractPosition = AngularCommand.deserialize(buffer, bufferOffset);
    // Deserialize message field [numAttempts]
    data.numAttempts = _deserializer.int16(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += AngularCommand.getMessageSize(object.retractPosition);
    return length + 3;
  }

  static datatype() {
    // Returns string type for a message object
    return 'wpi_jaco_msgs/HomeArmGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '5cc54d6dce7b985a5f2ef59749e9444c';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # Define the goal
    bool retract                                  # set to true to retract arm to a given position after moving home
    wpi_jaco_msgs/AngularCommand retractPosition  # position to which the arm should retract (only if retract is true)
    int16 numAttempts                                # attempts for moving to given joint pose (only used in motion planning versions)
    
    ================================================================================
    MSG: wpi_jaco_msgs/AngularCommand
    bool position       # true for a position command, false for a velocity command
    bool armCommand     # true if this command includes arm joint inputs
    bool fingerCommand  # true if this command includes finger inputs
    bool repeat         # true if the command should be repeatedly sent over a short interval
    float32[] joints    # position (rad) or velocity (rad/s) arm command
    float32[] fingers   # position (rad) or velocity (rad/s) finger command
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new HomeArmGoal(null);
    if (msg.retract !== undefined) {
      resolved.retract = msg.retract;
    }
    else {
      resolved.retract = false
    }

    if (msg.retractPosition !== undefined) {
      resolved.retractPosition = AngularCommand.Resolve(msg.retractPosition)
    }
    else {
      resolved.retractPosition = new AngularCommand()
    }

    if (msg.numAttempts !== undefined) {
      resolved.numAttempts = msg.numAttempts;
    }
    else {
      resolved.numAttempts = 0
    }

    return resolved;
    }
};

module.exports = HomeArmGoal;
